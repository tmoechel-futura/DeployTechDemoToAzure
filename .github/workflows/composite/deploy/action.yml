# composite actions have no notice of secrets, so they must be passed as parameters

name: "Composite Deploy Actions"
description: "Common Deploy Actions to AKS"

inputs:
  aks-name:
    description: "AKS_NAME Secret"
    required: true
  azure-credentials: 
    description: "AZURE_CREDENTIALS Secret"
    required: true
  aks-resource-group:
    description: "AKS_RESOURCE_GROUP Secret"
    required: true
  aks-secret:
    description: "AKS_SECRET Secret"
    required: true
  service-principal-id: 
    description: "SERVICE_PRINCIPAL_ID Secret"
    required: true
  service-principal-password:
    description: "SERVICE_PRINCIPAL_PASSWORD Secret"
    required: true
    
  akv_secrets:
    description: "Secrets to retrieve from Azure Key Vault"
    required: true
  idp-admin-password:
    description: "Name of env for idp admin password"
    required: true
  idp-admin-username:
    description: "Name of env for idp admin username"
    required: true
  rabbitmq-password:
    description: "rabbitmq password"
    required: false
  db-connection:
    description: "Database connection string"
    required: false

runs:
  using: "composite"
  steps:
  - uses: actions/checkout@v3
    
  - name: 'Get secrets'
    id: azure-keyvault-secrets
    shell: bash
    run: |
      echo ./${{env.SERVICE_DIR}}/${{env.SERVICE}}.yml
      secrets_get=${{ inputs.akv_secrets }}
      for secret_get in ${secrets_get[@]}
      do
        value=$(az keyvault secret show --name $secret_get --vault-name kvcontainerdeploydemo --query value --output tsv)
        echo "::add-mask::$value"
        echo "$secret_get=$value" >> $GITHUB_OUTPUT
      done    
  
  - name: Replace tokens for Service Config
    uses: cschleiden/replace-tokens@v1
    with:
      files: ./${{env.SERVICE_DIR}}/${{env.SERVICE}}.yml
    env:
      ${{ inputs.idp-admin-password }}: ${{ steps.azure-keyvault-secrets.outputs.rabbitmqpassword }}
      ${{ inputs.idp-admin-username }}: ${{ steps.azure-keyvault-secrets.outputs.admin-user-name }}
      ${{ inputs.rabbitmq-password }}: ${{ steps.azure-keyvault-secrets.outputs.rabbitmqpassword }}
      ${{ inputs.db-connection }}: ${{ steps.azure-keyvault-secrets.outputs.dbconnection }}
      
  - uses: azure/login@v1
    with:
      creds: ${{ inputs.azure-credentials }}  
    # Set the target Azure Kubernetes Service (AKS) cluster. 
    # Set the target Azure Kubernetes Service (AKS) cluster. 
  - uses: azure/aks-set-context@v3.2
    with:
      cluster-name: ${{ inputs.aks-name }}
      resource-group: ${{ inputs.aks-resource-group }}
    
    # Create namespace if doesn't exist
  - name: 'Create namespace'
    shell: bash  
    run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
    
    # Create image pull secret for ACR
  - uses: azure/k8s-create-secret@v4
    with:
      container-registry-url: ${{ env.ACR_LOGON_SERVER }}
      container-registry-username: ${{ inputs.service-principal-id }}
      container-registry-password: ${{ inputs.service-principal-password }}
      secret-name: ${{ inputs.aks-secret }}
      namespace: ${{ env.NAMESPACE }}
    
    # Deploy app to AKS
  - uses: azure/k8s-deploy@v4.9
    with:
      manifests: |
        ${{env.SERVICE_DIR}}/${{env.SERVICE}}.yml
      images: |
        ${{ env.IMAGE_NAME }}
      imagepullsecrets: |
        ${{ inputs.aks-secret }}
      namespace: ${{ env.NAMESPACE }}