# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: buyerbff

on:
  push:
    branches: [ "main"]
    paths:
      - FS.TechDemo.BuyerBFF/**
      - FS.TechDemo.Shared/**
      - .github/workflows/buyerbff.yml
      
#  pull_request:
#    branches: [ "main", "dev" ]
#    paths:
#      - FS.TechDemo.BuyerBFF/**
#      - FS.TechDemo.Shared/**
#      - .github/workflows/buyerbff.yml

env:
  SERVICE: buyer-bff
  SERVICE_DIR: FS.TechDemo.BuyerBFF
  IMAGE: buyer-bff
  ACR_LOGON_SERVER: ${{ secrets.ACR_NAME }}.azurecr.io
  IMAGE_NAME: ${{ secrets.ACR_NAME }}.azurecr.io/buyer-bff:${{ github.sha }}
  
jobs:
  
  build-image:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: 'Build and push image'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_LOGON_SERVER }}
          username: ${{ secrets.SERVICE_PRINCIPAL_ID }}
          password: ${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}
      - run: docker build -t ${{ env.IMAGE_NAME }} -f ./${{ env.SERVICE_DIR }}/Dockerfile .
      - run: docker push ${{ env.IMAGE_NAME }}        

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: 'Get secrets'
        id: azure-keyvault-secrets
        run: |
          secrets_get=(rabbitmqpassword)
          for secret_get in ${secrets_get[@]}
          do
            value=$(az keyvault secret show --name $secret_get --vault-name kvcontainerdeploydemo --query value --output tsv)
            echo "::add-mask::$value"
            echo "$secret_get=$value" >> $GITHUB_OUTPUT
          done
      
      - name: "Show secrets"
        id: show-kv-secrets
        run: |
          echo ${{ steps.azure-keyvault-secrets.outputs.rabbitmqpassword }}
          echo ./${{env.SERVICE_DIR}}/${{env.SERVICE}}.yml
          
  deploy-to-aks:
    runs-on: ubuntu-latest
    
    if: github.ref == 'refs/heads/main'
    
    needs: build-image
    env:
      NAMESPACE: dev
    
    steps:

      # to checkout additional files required for deployment
      - uses: actions/checkout@v3
        
      - name: Replace tokens for Service Config
        uses: cschleiden/replace-tokens@v1
        with:
          files: ./FS.TechDemo.BuyerBFF/buyer-bff.yml
        env:
          idp-admin-password: admin-secret
          idp-admin-username: admin  

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      # Set the target Azure Kubernetes Service (AKS) cluster. 
      - uses: azure/aks-set-context@v3.2
        with:
          cluster-name: ${{ secrets.AKS_NAME }}
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
      
      # Create namespace if doesn't exist
      - run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
      
      # Create image pull secret for ACR
      - uses: azure/k8s-create-secret@v4
        with:
          container-registry-url: ${{ env.ACR_LOGON_SERVER }}
          container-registry-username: ${{ secrets.SERVICE_PRINCIPAL_ID }}
          container-registry-password: ${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}
          secret-name: ${{ secrets.AKS_SECRET }}
          namespace: ${{ env.NAMESPACE }}
      
      # Deploy app to AKS
      - uses: azure/k8s-deploy@v4.9
        with:
          manifests: |
            FS.TechDemo.BuyerBFF/buyer-bff.yml
          images: |
            ${{ env.IMAGE_NAME }}
          imagepullsecrets: |
            ${{ secrets.AKS_SECRET }}
          namespace: ${{ env.NAMESPACE }}